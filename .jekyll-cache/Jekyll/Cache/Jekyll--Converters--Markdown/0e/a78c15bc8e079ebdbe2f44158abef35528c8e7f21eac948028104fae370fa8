I"^j<!-- more -->

<h2 class="no_toc" id="catalog">Catalog：</h2>

<ul id="markdown-toc">
  <li><a href="#高阶函数" id="markdown-toc-高阶函数">高阶函数</a></li>
  <li><a href="#匿名函数" id="markdown-toc-匿名函数">匿名函数</a></li>
  <li><a href="#mapreducefilter" id="markdown-toc-mapreducefilter">map/reduce/filter</a>    <ul>
      <li><a href="#map" id="markdown-toc-map">map</a></li>
      <li><a href="#reduce" id="markdown-toc-reduce">reduce</a></li>
      <li><a href="#filter" id="markdown-toc-filter">filter</a></li>
    </ul>
  </li>
  <li><a href="#闭包" id="markdown-toc-闭包">闭包</a></li>
  <li><a href="#装饰器" id="markdown-toc-装饰器">装饰器</a></li>
  <li><a href="#partial-函数" id="markdown-toc-partial-函数">partial 函数</a>    <ul>
      <li><a href="#小结" id="markdown-toc-小结">小结</a></li>
    </ul>
  </li>
</ul>

<p><strong>函数式编程（functional programming</strong> 是一种编程范式（Programming paradigm），或者说编程模式，比如我们常见的过程式编程是一种编程范式，面向对象编程又是另一种编程范式。</p>

<p>函数式编程的一大特性就是：可以把函数当成变量来使用，比如将函数赋值给其他变量、把函数作为参数传递给其他函数、函数的返回值也可以是一个函数等等。</p>

<p>Python 不是纯函数式编程语言，但它对函数式编程提供了一些支持。本章主要介绍 Python 中的函数式编程，主要包括以下几个方面：</p>

<h2 id="高阶函数">高阶函数</h2>

<p>在函数式编程中，我们可以将函数当作变量一样自由使用。一个函数接收另一个函数作为参数，这种函数称之为高阶函数（Higher-order Functions）。</p>

<h2 id="匿名函数">匿名函数</h2>

<p>当我们需要一些临时性的、小巧的函数，匿名函数可以满足我们的需求。</p>

<p>Python 提供了一个关键字 lambda，让我们可以创建一个匿名函数，也就是没有名称的函数。它的形式如下：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>lambda 参数: 表达式
</pre></td></tr></tbody></table></code></pre></div></div>

<p>匿名函数的应用形式如下：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="o">&gt;&gt;&gt;</span> <span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">x</span><span class="p">)(</span><span class="mi">8</span><span class="p">)</span>
<span class="mi">16</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>匿名函数在高阶函数中可以使表达更为简洁。举个栗子：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">arr</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>匿名函数本质上是一个函数，没有函数名称，因此使用匿名函数不用担心函数名冲突</p>

<h2 id="mapreducefilter">map/reduce/filter</h2>

<p>map/reduce/filter 是 Python 中较为常用的内建高阶函数，它们为函数式编程提供了不少便利。</p>

<h4 id="map">map</h4>

<p><code class="highlighter-rouge">map</code> 函数的使用形式如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>map(function, sequence)
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>解释</strong>：对 sequence 中的 item 依次执行 function(item)，并将结果组成一个 List 返回（很像MMA中的<code class="highlighter-rouge">Map[]</code>），也就是：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>[function(item1), function(item2), function(item3), ...]
</pre></td></tr></tbody></table></code></pre></div></div>

<p>看一些简单的例子。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">square</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
<span class="o">...</span>     <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span>

<span class="o">&gt;&gt;&gt;</span> <span class="nb">map</span><span class="p">(</span><span class="n">square</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">]</span>

<span class="o">&gt;&gt;&gt;</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>   <span class="c1"># 使用 lambda
</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">]</span>

<span class="o">&gt;&gt;&gt;</span> <span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
<span class="p">[</span><span class="s">'1'</span><span class="p">,</span> <span class="s">'2'</span><span class="p">,</span> <span class="s">'3'</span><span class="p">,</span> <span class="s">'4'</span><span class="p">]</span>

<span class="o">&gt;&gt;&gt;</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="p">[</span><span class="s">'1'</span><span class="p">,</span> <span class="s">'2'</span><span class="p">,</span> <span class="s">'3'</span><span class="p">,</span> <span class="s">'4'</span><span class="p">])</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>再看一个例子：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">double</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">x</span>

<span class="k">def</span> <span class="nf">triple</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="mi">3</span> <span class="o">*</span><span class="n">x</span>

<span class="k">def</span> <span class="nf">square</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span>

<span class="n">funcs</span> <span class="o">=</span> <span class="p">[</span><span class="n">double</span><span class="p">,</span> <span class="n">triple</span><span class="p">,</span> <span class="n">square</span><span class="p">]</span>  <span class="c1"># 列表元素是函数对象
</span>
<span class="c1"># 相当于 [double(4), triple(4), square(4)]
</span><span class="n">value</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">f</span><span class="p">:</span> <span class="n">f</span><span class="p">(</span><span class="mi">4</span><span class="p">),</span> <span class="n">funcs</span><span class="p">))</span>

<span class="k">print</span> <span class="n">value</span>

<span class="c1"># output
</span><span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">16</span><span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>上面的代码中，我们加了 list 转换，是为了兼容 Python3，在 Python2 中 map 直接返回列表，Python3 中返回迭代器。</p>

<h4 id="reduce">reduce</h4>

<p><code class="highlighter-rouge">reduce</code> 函数的使用形式如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>reduce(function, sequence[, initial])
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>解释</strong>：先将 sequence 的前两个 item 传给 function，即 function(item1, item2)，函数的返回值和 sequence 的下一个 item 再传给 function，即 function(function(item1, item2), item3)，如此迭代，直到 sequence 没有元素，如果有 initial，则作为初始值调用。（这让我想到秦九韶算法）</p>

<p>也就是说：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>reduece(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)
</pre></td></tr></tbody></table></code></pre></div></div>

<p>看一些例子，就能很快理解了。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="o">&gt;&gt;&gt;</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>  <span class="c1"># 相当于 ((1 * 2) * 3) * 4
</span><span class="mi">24</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="mi">5</span><span class="p">)</span> <span class="c1"># ((((5 * 1) * 2) * 3)) * 4
</span><span class="mi">120</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">/</span> <span class="n">y</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="mi">72</span><span class="p">)</span>  <span class="c1">#  (((72 / 2) / 3)) / 4
</span><span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="mi">5</span><span class="p">)</span>  <span class="c1"># ((((5 + 1) + 2) + 3)) + 4
</span><span class="mi">15</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">-</span> <span class="n">y</span><span class="p">,</span> <span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="mi">20</span><span class="p">)</span>  <span class="c1"># ((20 - 8) - 5) - 1
</span><span class="mi">6</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">a</span> <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="k">else</span> <span class="n">b</span>   <span class="c1"># 两两比较，取最大值
</span><span class="o">&gt;&gt;&gt;</span> <span class="nb">reduce</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">])</span>
<span class="mi">10</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="filter">filter</h4>

<p><code class="highlighter-rouge">filter</code> 函数用于过滤元素，它的使用形式如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>filter(function, sequnce)
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>解释</strong>：将 function 依次作用于 sequnce 的每个 item，即 function(item)，将返回值为 True 的 item 组成一个 List/String/Tuple (取决于 sequnce 的类型，python3 统一返回迭代器) 返回。</p>

<p>看一些例子。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">even_num</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">even_num</span>
<span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">odd_num</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">odd_num</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="s">'g'</span><span class="p">,</span> <span class="s">'hijack'</span><span class="p">)</span>
<span class="s">'ac'</span>        <span class="c1"># python2
</span><span class="o">&gt;&gt;&gt;</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="s">'g'</span><span class="p">,</span> <span class="s">'hijack'</span><span class="p">)</span>
<span class="o">&lt;</span><span class="nb">filter</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x1034b4080</span><span class="o">&gt;</span>   <span class="c1"># python3
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="闭包">闭包</h2>

<p>暂时跳过。</p>

<h2 id="装饰器">装饰器</h2>

<p>暂时跳过。</p>

<h2 id="partial-函数">partial 函数</h2>

<p>Python 提供了一个 functools 的模块，该模块为高阶函数提供支持，partial 就是其中的一个函数，该函数的形式如下：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">functools</span><span class="o">.</span><span class="n">partial</span><span class="p">(</span><span class="n">func</span><span class="p">[,</span><span class="o">*</span><span class="n">args</span><span class="p">][,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">])</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>这里先举个例子，看看它是怎么用的。</p>

<p>假设有如下函数：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">multiply</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>现在，我们想返回某个数的双倍，即：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>&gt;&gt;&gt; multiply(3, y=2)
6
&gt;&gt;&gt; multiply(4, y=2)
8
&gt;&gt;&gt; multiply(5, y=2)
10
</pre></td></tr></tbody></table></code></pre></div></div>

<p>上面的调用有点繁琐，每次都要传入 <code class="highlighter-rouge">y=2</code>，我们想到可以定义一个新的函数，把 <code class="highlighter-rouge">y=2</code> 作为默认值，即：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">double</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">multiply</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>现在，我们可以这样调用了：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>&gt;&gt;&gt; double(3)
6
&gt;&gt;&gt; double(4)
8
&gt;&gt;&gt; double(5)
10
</pre></td></tr></tbody></table></code></pre></div></div>

<p>事实上，我们可以不用自己定义 <code class="highlighter-rouge">double</code>，利用 <code class="highlighter-rouge">partial</code>，我们可以这样：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">partial</span>

<span class="n">double</span> <span class="o">=</span> <span class="n">partial</span><span class="p">(</span><span class="n">multiply</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="highlighter-rouge">partial</code> 接收函数 <code class="highlighter-rouge">multiply</code> 作为参数，固定 <code class="highlighter-rouge">multiply</code> 的参数 <code class="highlighter-rouge">y=2</code>，并返回一个新的函数给 <code class="highlighter-rouge">double</code>，这跟我们自己定义 <code class="highlighter-rouge">double</code> 函数的效果是一样的。</p>

<p>所以，简单而言，<code class="highlighter-rouge">partial</code> 函数的功能就是：把一个函数的某些参数给固定住，返回一个新的函数。</p>

<p>需要注意的是，我们上面是固定了 <code class="highlighter-rouge">multiply</code> 的关键字参数 <code class="highlighter-rouge">y=2</code>，如果直接使用：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">double</span> <span class="o">=</span> <span class="n">partial</span><span class="p">(</span><span class="n">multiply</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>则 <code class="highlighter-rouge">2</code> 是赋给了 <code class="highlighter-rouge">multiply</code> 最左边的参数 <code class="highlighter-rouge">x</code>，不信？我们可以验证一下：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">partial</span>

<span class="k">def</span> <span class="nf">subtraction</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">x</span> <span class="o">-</span> <span class="n">y</span>

<span class="n">f</span> <span class="o">=</span> <span class="n">partial</span><span class="p">(</span><span class="n">subtraction</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>  <span class="c1"># 4 赋给了 x
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>   <span class="c1"># 4 - 10
</span><span class="o">-</span><span class="mi">6</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="小结">小结</h4>

<ul>
  <li>partial 的功能：固定函数参数，返回一个新的函数。</li>
  <li>当函数参数太多，需要固定某些参数时，可以使用 <code class="highlighter-rouge">functools.partial</code> 创建一个新的函数。</li>
</ul>

<hr />
:ET